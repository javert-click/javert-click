import Array.jsil, Boolean.jsil, Date.jsil, Function.jsil, Global.jsil, Init.jsil, Internals.jsil, Math.jsil, Number.jsil, Object.jsil, RegExp.jsil, String.jsil, Errors.jsil, List.jsil, Node.jsil, DOM.jsil, Attribute.jsil, CDATASection.jsil, CharacterData.jsil, Comment.jsil, ArrayUtils.jsil, Document.jsil, Element.jsil, NodeList.jsil, Text.jsil, DocumentFragment.jsil, LiveNodeList.jsil, DocumentType.jsil, EntityReference.jsil, ProcessingInstruction.jsil, DOMException.jsil, NamedNodeMap.jsil, Entity.jsil, Notation.jsil, DOMImplementation.jsil, DocumentLoading.jsil, JsUnitCore.jsil, DOMTestCase.jsil, initDOMHeapCoreLevel1.jsil, HTMLFiles.jsil, Event.jsil, EventListener.jsil, EventTarget.jsil, ShadowRoot.jsil, Window.jsil, GamepadEvent.jsil, FocusEvent.jsil, MouseEvent.jsil, CustomEvent.jsil, UIEvent.jsil, WheelEvent.jsil, KeyboardEvent.jsil, MessageEvent.jsil, EventsSemantics.jsil, FormElement.jsil, InputElement.jsil, CompositionEvent.jsil, HTMLSlotElement.jsil, HTMLElement.jsil, HTMLDocument.jsil, XMLDocument.jsil, ClassList.jsil, StringUtils.jsil, CSSStyleDeclaration.jsil, DOMRect.jsil, Performance.jsil, MessageChannel.jsil, MessagePort.jsil, Serialization.jsil, MPSemantics.jsil, MessagePassing.jsil, ConfSetup.jsil, DedicatedWorkerGlobalScope.jsil, SharedWorker.jsil, SharedWorkerGlobalScope.jsil, Worker.jsil, WorkerGlobalScope.jsil, JS2JSILList.jsil, ObjectUtils.jsil, Promise.jsil, Testharness.jsil;
proc anonymous_FibonacciWorker_0 (x__scope, x__this, e) {
              x__er_m := new(null);
              x__er := new(x__er_m);
              [x__er_m, "@er"] := true;
              [x__er, "input"] := undefined;
              [x__er, "result"] := undefined;
              [x__er, "arguments"] := undefined;
              [x__er, "e"] := e;
              x_88 := args;
              x_89 := (cdr (cdr x_88));
              x__args := "create_arguments_object"(x_89);
              [x__er, "arguments"] := x__args;
              x__sc_fst := (x__scope l+ {{ x__er }});
              x__te := "TypeError"();
              x__se := "SyntaxError"();
              x_90 := l-nth(x__sc_fst, 1.);
              x_91 := {{ "v", x_90, "e" }};
              x_91_v := "i__getValue"(x_91) with pre_elab;
              x_92 := "i__checkObjectCoercible"(x_91_v) with pre_elab;
              x_93 := {{ "o", x_91_v, "data" }};
              x_93_v := "i__getValue"(x_93) with pre_elab;
              x_94 := l-nth(x__sc_fst, 1.);
              x_95 := {{ "v", x_94, "input" }};
              x_96 := "i__checkAssignmentErrors"(x_95) with pre_elab;
              x_97 := "i__putValue"(x_95, x_93_v) with pre_elab;
              x_98 := empty;
              x_99 := "hasProperty"($lg, "console") with pre_elab;
              goto [x_99] then_13 else_13;
    then_13:  x_100 := {{ "v", $lg, "console" }};
              goto end_3;
    else_13:  x_101 := {{ "v", undefined, "console" }};
    end_3:    PHI(x_102: x_100, x_101);
              x_102_v := "i__getValue"(x_102) with pre_elab;
              x_103 := "i__checkObjectCoercible"(x_102_v) with pre_elab;
              x_104 := {{ "o", x_102_v, "log" }};
              x_104_v := "i__getValue"(x_104) with pre_elab;
              x_107_v := "i__getValue"("WORKER: calculating fibonacci of ") with pre_elab;
              x_105 := l-nth(x__sc_fst, 1.);
              x_106 := {{ "v", x_105, "input" }};
              x_106_v := "i__getValue"(x_106) with pre_elab;
              x_108_p := "i__toPrimitive"(x_107_v) with pre_elab;
              x_106_p := "i__toPrimitive"(x_106_v) with pre_elab;
              goto [(((typeOf x_108_p) = Str) or ((typeOf x_106_p) = Str))] then_14 else_14;
    then_14:  x_109_s := "i__toStringComputed"(x_108_p) with pre_elab;
              x_106_s := "i__toStringComputed"(x_106_p) with pre_elab;
              x_110 := (x_109_s ++ x_106_s);
              goto fi_4;
    else_14:  x_111_n := "i__toNumber"(x_108_p) with pre_elab;
              x_106_n := "i__toNumber"(x_106_p) with pre_elab;
              x_112 := (x_111_n + x_106_n);
    fi_4:     PHI(x_113: x_110, x_112);
              x_113_v := "i__getValue"(x_113) with pre_elab;
              goto [(not ((typeOf x_104_v) = Obj))] pre_elab next_18;
    next_18:  x_115 := metadata (x_104_v);
              x_114 := "i__isCallable"(x_104_v);
              goto [x_114] next_19 pre_elab;
    next_19:  x_116 := hasField(x_115,"@boundThis");
              goto [x_116] else_15 lab_8;
    else_15:  x_117 := [x_115, "@boundThis"];
              x_118 := [x_115, "@boundArguments"];
              x_119 := [x_115, "@targetFunction"];
              x_120 := metadata (x_119);
              x_body_6 := [x_120, "@call"];
              x_fscope_6 := [x_120, "@scope"];
              x_121 := (({{ x_body_6, x_fscope_6, x_117 }} l+ x_118) l+ {{ x_113_v }});
              x_122 := apply(x_121) with pre_elab;
              goto lab_9;
    lab_8:    x_body_7 := [x_115, "@call"];
              goto [(x_body_7 = "ExecuteEval")] then_15 else_16;
    then_15:  x_123 := extern ExecuteEval(x__sc_fst, x__this, x_113_v) with pre_elab;
              goto lab_9;
    else_16:  x_fscope_7 := [x_115, "@scope"];
              goto [((typeOf x_104) = List)] then_16 else_17;
    then_16:  goto [(l-nth(x_104, 0.) = "o")] then_17 else_17;
    then_17:  x_this_9 := l-nth(x_104, 1.);
              goto fi_5;
    else_17:  x_this_10 := undefined;
    fi_5:     PHI(x_this_11: x_this_9, x_this_10);
              goto [((typeOf x_this_11) = Obj)] next_20 next_21;
    next_20:  [x_this_11, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_21:  x_124 := x_body_7(x_fscope_7, x_this_11, x_113_v) with pre_elab;
    lab_9:    PHI(x_125: x_122, x_123, x_124);
              goto [(x_125 = empty)] next_22 next_23;
    next_22:  x_126 := undefined;
    next_23:  PHI(x_127: x_125, x_126);
              x_127_v := "i__getValue"(x_127) with pre_elab;
              x_128 := l-nth(x__sc_fst, 0.);
              x_129 := {{ "v", x_128, "fibonacci" }};
              x_129_v := "i__getValue"(x_129) with pre_elab;
              x_130 := l-nth(x__sc_fst, 1.);
              x_131 := {{ "v", x_130, "input" }};
              x_131_v := "i__getValue"(x_131) with pre_elab;
              goto [(not ((typeOf x_129_v) = Obj))] pre_elab next_24;
    next_24:  x_133 := metadata (x_129_v);
              x_132 := "i__isCallable"(x_129_v);
              goto [x_132] next_25 pre_elab;
    next_25:  x_134 := hasField(x_133,"@boundThis");
              goto [x_134] else_18 lab_10;
    else_18:  x_135 := [x_133, "@boundThis"];
              x_136 := [x_133, "@boundArguments"];
              x_137 := [x_133, "@targetFunction"];
              x_138 := metadata (x_137);
              x_body_8 := [x_138, "@call"];
              x_fscope_8 := [x_138, "@scope"];
              x_139 := (({{ x_body_8, x_fscope_8, x_135 }} l+ x_136) l+ {{ x_131_v }});
              x_140 := apply(x_139) with pre_elab;
              goto lab_11;
    lab_10:   x_body_9 := [x_133, "@call"];
              goto [(x_body_9 = "ExecuteEval")] then_18 else_19;
    then_18:  x_141 := extern ExecuteEval(x__sc_fst, x__this, x_131_v) with pre_elab;
              goto lab_11;
    else_19:  x_fscope_9 := [x_133, "@scope"];
              goto [((typeOf x_129) = List)] then_19 else_20;
    then_19:  goto [(l-nth(x_129, 0.) = "o")] then_20 else_20;
    then_20:  x_this_12 := l-nth(x_129, 1.);
              goto fi_6;
    else_20:  x_this_13 := undefined;
    fi_6:     PHI(x_this_14: x_this_12, x_this_13);
              goto [((typeOf x_this_14) = Obj)] next_26 next_27;
    next_26:  [x_this_14, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_27:  x_142 := x_body_9(x_fscope_9, x_this_14, x_131_v) with pre_elab;
    lab_11:   PHI(x_143: x_140, x_141, x_142);
              goto [(x_143 = empty)] next_28 next_29;
    next_28:  x_144 := undefined;
    next_29:  PHI(x_145: x_143, x_144);
              x_145_v := "i__getValue"(x_145) with pre_elab;
              x_146 := l-nth(x__sc_fst, 1.);
              x_147 := {{ "v", x_146, "result" }};
              x_148 := "i__checkAssignmentErrors"(x_147) with pre_elab;
              x_149 := "i__putValue"(x_147, x_145_v) with pre_elab;
              x_150 := empty;
              goto [(x_150 = empty)] next_30 next_31;
    next_30:  skip;
    next_31:  PHI(x_151: x_150, x_127_v);
              x_152 := "hasProperty"($lg, "console") with pre_elab;
              goto [x_152] then_21 else_21;
    then_21:  x_153 := {{ "v", $lg, "console" }};
              goto end_4;
    else_21:  x_154 := {{ "v", undefined, "console" }};
    end_4:    PHI(x_155: x_153, x_154);
              x_155_v := "i__getValue"(x_155) with pre_elab;
              x_156 := "i__checkObjectCoercible"(x_155_v) with pre_elab;
              x_157 := {{ "o", x_155_v, "log" }};
              x_157_v := "i__getValue"(x_157) with pre_elab;
              x_160_v := "i__getValue"("WORKER: result fibonacci: ") with pre_elab;
              x_158 := l-nth(x__sc_fst, 1.);
              x_159 := {{ "v", x_158, "result" }};
              x_159_v := "i__getValue"(x_159) with pre_elab;
              x_161_p := "i__toPrimitive"(x_160_v) with pre_elab;
              x_159_p := "i__toPrimitive"(x_159_v) with pre_elab;
              goto [(((typeOf x_161_p) = Str) or ((typeOf x_159_p) = Str))] then_22 else_22;
    then_22:  x_162_s := "i__toStringComputed"(x_161_p) with pre_elab;
              x_159_s := "i__toStringComputed"(x_159_p) with pre_elab;
              x_163 := (x_162_s ++ x_159_s);
              goto fi_7;
    else_22:  x_164_n := "i__toNumber"(x_161_p) with pre_elab;
              x_159_n := "i__toNumber"(x_159_p) with pre_elab;
              x_165 := (x_164_n + x_159_n);
    fi_7:     PHI(x_166: x_163, x_165);
              x_166_v := "i__getValue"(x_166) with pre_elab;
              goto [(not ((typeOf x_157_v) = Obj))] pre_elab next_32;
    next_32:  x_168 := metadata (x_157_v);
              x_167 := "i__isCallable"(x_157_v);
              goto [x_167] next_33 pre_elab;
    next_33:  x_169 := hasField(x_168,"@boundThis");
              goto [x_169] else_23 lab_12;
    else_23:  x_170 := [x_168, "@boundThis"];
              x_171 := [x_168, "@boundArguments"];
              x_172 := [x_168, "@targetFunction"];
              x_173 := metadata (x_172);
              x_body_10 := [x_173, "@call"];
              x_fscope_10 := [x_173, "@scope"];
              x_174 := (({{ x_body_10, x_fscope_10, x_170 }} l+ x_171) l+ {{ x_166_v }});
              x_175 := apply(x_174) with pre_elab;
              goto lab_13;
    lab_12:   x_body_11 := [x_168, "@call"];
              goto [(x_body_11 = "ExecuteEval")] then_23 else_24;
    then_23:  x_176 := extern ExecuteEval(x__sc_fst, x__this, x_166_v) with pre_elab;
              goto lab_13;
    else_24:  x_fscope_11 := [x_168, "@scope"];
              goto [((typeOf x_157) = List)] then_24 else_25;
    then_24:  goto [(l-nth(x_157, 0.) = "o")] then_25 else_25;
    then_25:  x_this_15 := l-nth(x_157, 1.);
              goto fi_8;
    else_25:  x_this_16 := undefined;
    fi_8:     PHI(x_this_17: x_this_15, x_this_16);
              goto [((typeOf x_this_17) = Obj)] next_34 next_35;
    next_34:  [x_this_17, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_35:  x_177 := x_body_11(x_fscope_11, x_this_17, x_166_v) with pre_elab;
    lab_13:   PHI(x_178: x_175, x_176, x_177);
              goto [(x_178 = empty)] next_36 next_37;
    next_36:  x_179 := undefined;
    next_37:  PHI(x_180: x_178, x_179);
              x_180_v := "i__getValue"(x_180) with pre_elab;
              x_181 := "hasProperty"($lg, "postMessage") with pre_elab;
              goto [x_181] then_26 else_26;
    then_26:  x_182 := {{ "v", $lg, "postMessage" }};
              goto end_5;
    else_26:  x_183 := {{ "v", undefined, "postMessage" }};
    end_5:    PHI(x_184: x_182, x_183);
              x_184_v := "i__getValue"(x_184) with pre_elab;
              x_185 := l-nth(x__sc_fst, 1.);
              x_186 := {{ "v", x_185, "result" }};
              x_186_v := "i__getValue"(x_186) with pre_elab;
              goto [(not ((typeOf x_184_v) = Obj))] pre_elab next_38;
    next_38:  x_188 := metadata (x_184_v);
              x_187 := "i__isCallable"(x_184_v);
              goto [x_187] next_39 pre_elab;
    next_39:  x_189 := hasField(x_188,"@boundThis");
              goto [x_189] else_27 lab_14;
    else_27:  x_190 := [x_188, "@boundThis"];
              x_191 := [x_188, "@boundArguments"];
              x_192 := [x_188, "@targetFunction"];
              x_193 := metadata (x_192);
              x_body_12 := [x_193, "@call"];
              x_fscope_12 := [x_193, "@scope"];
              x_194 := (({{ x_body_12, x_fscope_12, x_190 }} l+ x_191) l+ {{ x_186_v }});
              x_195 := apply(x_194) with pre_elab;
              goto lab_15;
    lab_14:   x_body_13 := [x_188, "@call"];
              goto [(x_body_13 = "ExecuteEval")] then_27 else_28;
    then_27:  x_196 := extern ExecuteEval(x__sc_fst, x__this, x_186_v) with pre_elab;
              goto lab_15;
    else_28:  x_fscope_13 := [x_188, "@scope"];
              goto [((typeOf x_184) = List)] then_28 else_29;
    then_28:  goto [(l-nth(x_184, 0.) = "o")] then_29 else_29;
    then_29:  x_this_18 := l-nth(x_184, 1.);
              goto fi_9;
    else_29:  x_this_19 := undefined;
    fi_9:     PHI(x_this_20: x_this_18, x_this_19);
              goto [((typeOf x_this_20) = Obj)] next_40 next_41;
    next_40:  [x_this_20, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_41:  x_197 := x_body_13(x_fscope_13, x_this_20, x_186_v) with pre_elab;
    lab_15:   PHI(x_198: x_195, x_196, x_197);
              goto [(x_198 = empty)] next_42 next_43;
    next_42:  x_199 := undefined;
    next_43:  PHI(x_200: x_198, x_199);
              x_200_v := "i__getValue"(x_200) with pre_elab;
              x_201 := "hasProperty"($lg, "console") with pre_elab;
              goto [x_201] then_30 else_30;
    then_30:  x_202 := {{ "v", $lg, "console" }};
              goto end_6;
    else_30:  x_203 := {{ "v", undefined, "console" }};
    end_6:    PHI(x_204: x_202, x_203);
              x_204_v := "i__getValue"(x_204) with pre_elab;
              x_205 := "i__checkObjectCoercible"(x_204_v) with pre_elab;
              x_206 := {{ "o", x_204_v, "log" }};
              x_206_v := "i__getValue"(x_206) with pre_elab;
              x_207_v := "i__getValue"("WORKER: message sent back to main") with pre_elab;
              goto [(not ((typeOf x_206_v) = Obj))] pre_elab next_44;
    next_44:  x_209 := metadata (x_206_v);
              x_208 := "i__isCallable"(x_206_v);
              goto [x_208] next_45 pre_elab;
    next_45:  x_210 := hasField(x_209,"@boundThis");
              goto [x_210] else_31 lab_16;
    else_31:  x_211 := [x_209, "@boundThis"];
              x_212 := [x_209, "@boundArguments"];
              x_213 := [x_209, "@targetFunction"];
              x_214 := metadata (x_213);
              x_body_14 := [x_214, "@call"];
              x_fscope_14 := [x_214, "@scope"];
              x_215 := (({{ x_body_14, x_fscope_14, x_211 }} l+ x_212) l+ {{ x_207_v }});
              x_216 := apply(x_215) with pre_elab;
              goto lab_17;
    lab_16:   x_body_15 := [x_209, "@call"];
              goto [(x_body_15 = "ExecuteEval")] then_31 else_32;
    then_31:  x_217 := extern ExecuteEval(x__sc_fst, x__this, x_207_v) with pre_elab;
              goto lab_17;
    else_32:  x_fscope_15 := [x_209, "@scope"];
              goto [((typeOf x_206) = List)] then_32 else_33;
    then_32:  goto [(l-nth(x_206, 0.) = "o")] then_33 else_33;
    then_33:  x_this_21 := l-nth(x_206, 1.);
              goto fi_10;
    else_33:  x_this_22 := undefined;
    fi_10:    PHI(x_this_23: x_this_21, x_this_22);
              goto [((typeOf x_this_23) = Obj)] next_46 next_47;
    next_46:  [x_this_23, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_47:  x_218 := x_body_15(x_fscope_15, x_this_23, x_207_v) with pre_elab;
    lab_17:   PHI(x_219: x_216, x_217, x_218);
              goto [(x_219 = empty)] next_48 next_49;
    next_48:  x_220 := undefined;
    next_49:  PHI(x_221: x_219, x_220);
              x_221_v := "i__getValue"(x_221) with pre_elab;
              x_222 := empty;
    pre_rlab: ret := x_222;
              x__scope_f := x__sc_fst;
              return;
    pre_elab: PHI(ret: x_91_v, x_92, x_93_v, x_96, x_97, x_99, x_102_v, x_103, x_104_v, x_107_v, x_106_v, x_108_p, x_106_p, x_109_s, x_106_s, x_111_n, x_106_n, x_113_v, x__te, x__te, x_122, x_123, x_124, x_127_v, x_129_v, x_131_v, x__te, x__te, x_140, x_141, x_142, x_145_v, x_148, x_149, x_152, x_155_v, x_156, x_157_v, x_160_v, x_159_v, x_161_p, x_159_p, x_162_s, x_159_s, x_164_n, x_159_n, x_166_v, x__te, x__te, x_175, x_176, x_177, x_180_v, x_181, x_184_v, x_186_v, x__te, x__te, x_195, x_196, x_197, x_200_v, x_201, x_204_v, x_205, x_206_v, x_207_v, x__te, x__te, x_216, x_217, x_218, x_221_v);
              x__scope_f := x__sc_fst;
              throw
};

proc fibonacci_FibonacciWorker_1 (x__scope, x__this, n) {
              x__er_m := new(null);
              x__er := new(x__er_m);
              [x__er_m, "@er"] := true;
              [x__er, "arguments"] := undefined;
              [x__er, "n"] := n;
              x_0 := args;
              x_1 := (cdr (cdr x_0));
              x__args := "create_arguments_object"(x_1);
              [x__er, "arguments"] := x__args;
              x__sc_fst := (x__scope l+ {{ x__er }});
              x__te := "TypeError"();
              x__se := "SyntaxError"();
              x_2 := l-nth(x__sc_fst, 1.);
              x_3 := {{ "v", x_2, "n" }};
              x_3_v := "i__getValue"(x_3) with pre_elab;
              x_4_v := "i__getValue"(2.) with pre_elab;
              x_5 := "i__abstractComparison"(x_3_v, x_4_v, true) with pre_elab;
              goto [(x_5 = undefined)] lab_0 lab_1;
    lab_0:    x_6 := false;
    lab_1:    PHI(x_7: x_5, x_6);
              x_7_v := "i__getValue"(x_7) with pre_elab;
              x_7_b := "i__toBoolean"(x_7_v) with pre_elab;
              goto [x_7_b] then_0 else_0;
    then_0:   x_8 := l-nth(x__sc_fst, 1.);
              x_9 := {{ "v", x_8, "n" }};
              x_9_v := "i__getValue"(x_9) with pre_elab;
              goto pre_rlab;
              goto end_0;
    else_0:   x_10 := empty;
    end_0:    PHI(x_11: x_9_v, x_10);
              x_12 := l-nth(x__sc_fst, 0.);
              x_13 := {{ "v", x_12, "fibonacci" }};
              x_13_v := "i__getValue"(x_13) with pre_elab;
              x_14 := l-nth(x__sc_fst, 1.);
              x_15 := {{ "v", x_14, "n" }};
              x_15_v := "i__getValue"(x_15) with pre_elab;
              x_16_v := "i__getValue"(1.) with pre_elab;
              x_15_n := "i__toNumber"(x_15_v) with pre_elab;
              x_17_n := "i__toNumber"(x_16_v) with pre_elab;
              x_18 := (x_15_n - x_17_n);
              x_18_v := "i__getValue"(x_18) with pre_elab;
              goto [(not ((typeOf x_13_v) = Obj))] pre_elab next_0;
    next_0:   x_20 := metadata (x_13_v);
              x_19 := "i__isCallable"(x_13_v);
              goto [x_19] next_1 pre_elab;
    next_1:   x_21 := hasField(x_20,"@boundThis");
              goto [x_21] else_1 lab_2;
    else_1:   x_22 := [x_20, "@boundThis"];
              x_23 := [x_20, "@boundArguments"];
              x_24 := [x_20, "@targetFunction"];
              x_25 := metadata (x_24);
              x_body_0 := [x_25, "@call"];
              x_fscope_0 := [x_25, "@scope"];
              x_26 := (({{ x_body_0, x_fscope_0, x_22 }} l+ x_23) l+ {{ x_18_v }});
              x_27 := apply(x_26) with pre_elab;
              goto lab_3;
    lab_2:    x_body_1 := [x_20, "@call"];
              goto [(x_body_1 = "ExecuteEval")] then_1 else_2;
    then_1:   x_28 := extern ExecuteEval(x__sc_fst, x__this, x_18_v) with pre_elab;
              goto lab_3;
    else_2:   x_fscope_1 := [x_20, "@scope"];
              goto [((typeOf x_13) = List)] then_2 else_3;
    then_2:   goto [(l-nth(x_13, 0.) = "o")] then_3 else_3;
    then_3:   x_this_0 := l-nth(x_13, 1.);
              goto fi_0;
    else_3:   x_this_1 := undefined;
    fi_0:     PHI(x_this_2: x_this_0, x_this_1);
              goto [((typeOf x_this_2) = Obj)] next_2 next_3;
    next_2:   [x_this_2, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_3:   x_29 := x_body_1(x_fscope_1, x_this_2, x_18_v) with pre_elab;
    lab_3:    PHI(x_30: x_27, x_28, x_29);
              goto [(x_30 = empty)] next_4 next_5;
    next_4:   x_31 := undefined;
    next_5:   PHI(x_32: x_30, x_31);
              x_32_v := "i__getValue"(x_32) with pre_elab;
              x_33 := l-nth(x__sc_fst, 0.);
              x_34 := {{ "v", x_33, "fibonacci" }};
              x_34_v := "i__getValue"(x_34) with pre_elab;
              x_35 := l-nth(x__sc_fst, 1.);
              x_36 := {{ "v", x_35, "n" }};
              x_36_v := "i__getValue"(x_36) with pre_elab;
              x_37_v := "i__getValue"(2.) with pre_elab;
              x_36_n := "i__toNumber"(x_36_v) with pre_elab;
              x_38_n := "i__toNumber"(x_37_v) with pre_elab;
              x_39 := (x_36_n - x_38_n);
              x_39_v := "i__getValue"(x_39) with pre_elab;
              goto [(not ((typeOf x_34_v) = Obj))] pre_elab next_6;
    next_6:   x_41 := metadata (x_34_v);
              x_40 := "i__isCallable"(x_34_v);
              goto [x_40] next_7 pre_elab;
    next_7:   x_42 := hasField(x_41,"@boundThis");
              goto [x_42] else_4 lab_4;
    else_4:   x_43 := [x_41, "@boundThis"];
              x_44 := [x_41, "@boundArguments"];
              x_45 := [x_41, "@targetFunction"];
              x_46 := metadata (x_45);
              x_body_2 := [x_46, "@call"];
              x_fscope_2 := [x_46, "@scope"];
              x_47 := (({{ x_body_2, x_fscope_2, x_43 }} l+ x_44) l+ {{ x_39_v }});
              x_48 := apply(x_47) with pre_elab;
              goto lab_5;
    lab_4:    x_body_3 := [x_41, "@call"];
              goto [(x_body_3 = "ExecuteEval")] then_4 else_5;
    then_4:   x_49 := extern ExecuteEval(x__sc_fst, x__this, x_39_v) with pre_elab;
              goto lab_5;
    else_5:   x_fscope_3 := [x_41, "@scope"];
              goto [((typeOf x_34) = List)] then_5 else_6;
    then_5:   goto [(l-nth(x_34, 0.) = "o")] then_6 else_6;
    then_6:   x_this_3 := l-nth(x_34, 1.);
              goto fi_1;
    else_6:   x_this_4 := undefined;
    fi_1:     PHI(x_this_5: x_this_3, x_this_4);
              goto [((typeOf x_this_5) = Obj)] next_8 next_9;
    next_8:   [x_this_5, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_9:   x_50 := x_body_3(x_fscope_3, x_this_5, x_39_v) with pre_elab;
    lab_5:    PHI(x_51: x_48, x_49, x_50);
              goto [(x_51 = empty)] next_10 next_11;
    next_10:  x_52 := undefined;
    next_11:  PHI(x_53: x_51, x_52);
              x_53_v := "i__getValue"(x_53) with pre_elab;
              x_32_p := "i__toPrimitive"(x_32_v) with pre_elab;
              x_53_p := "i__toPrimitive"(x_53_v) with pre_elab;
              goto [(((typeOf x_32_p) = Str) or ((typeOf x_53_p) = Str))] then_7 else_7;
    then_7:   x_32_s := "i__toStringComputed"(x_32_p) with pre_elab;
              x_53_s := "i__toStringComputed"(x_53_p) with pre_elab;
              x_54 := (x_32_s ++ x_53_s);
              goto fi_2;
    else_7:   x_32_n := "i__toNumber"(x_32_p) with pre_elab;
              x_53_n := "i__toNumber"(x_53_p) with pre_elab;
              x_55 := (x_32_n + x_53_n);
    fi_2:     PHI(x_56: x_54, x_55);
              x_56_v := "i__getValue"(x_56) with pre_elab;
              goto pre_rlab;
              x_57 := empty;
    pre_rlab: PHI(ret: x_9_v, x_56_v, x_57);
              x__scope_f := x__sc_fst;
              return;
    pre_elab: PHI(ret: x_3_v, x_4_v, x_5, x_7_v, x_7_b, x_9_v, x_13_v, x_15_v, x_16_v, x_15_n, x_17_n, x_18_v, x__te, x__te, x_27, x_28, x_29, x_32_v, x_34_v, x_36_v, x_37_v, x_36_n, x_38_n, x_39_v, x__te, x__te, x_48, x_49, x_50, x_53_v, x_32_p, x_53_p, x_32_s, x_53_s, x_32_n, x_53_n, x_56_v);
              x__scope_f := x__sc_fst;
              throw
};

proc mainFibonacciWorker () {
             x__scope := {{ $lg }};
             x__sc_fst := {{ $lg }};
             x__this := $lg;
             [$lg, "arguments"] := {{ "d", undefined, true, true, false }};
             x__te := "TypeError"();
             x__se := "SyntaxError"();
             x_f_0 := "create_function_object"(x__sc_fst, "fibonacci", "fibonacci_FibonacciWorker_1", "fibonacci_FibonacciWorker_1", {{ "n" }});
             x_er_0 := l-nth(x__sc_fst, 0.);
             [x_er_0, "fibonacci"] := {{ "d", x_f_0, true, true, false }};
             x_60 := "hasProperty"($lg, "onmessage") with elab;
             goto [x_60] then_8 else_8;
    then_8:  x_61 := {{ "v", $lg, "onmessage" }};
             goto end_1;
    else_8:  x_62 := {{ "v", undefined, "onmessage" }};
    end_1:   PHI(x_63: x_61, x_62);
             x_f_1 := "create_function_object"(x__sc_fst, "", "anonymous_FibonacciWorker_0", "anonymous_FibonacciWorker_0", {{ "e" }});
             x_f_1_v := "i__getValue"(x_f_1) with elab;
             x_64 := "i__checkAssignmentErrors"(x_63) with elab;
             x_65 := "i__putValue"(x_63, x_f_1_v) with elab;
             skip;
             x_66 := "hasProperty"($lg, "console") with elab;
             goto [x_66] then_9 else_9;
    then_9:  x_67 := {{ "v", $lg, "console" }};
             goto end_2;
    else_9:  x_68 := {{ "v", undefined, "console" }};
    end_2:   PHI(x_69: x_67, x_68);
             x_69_v := "i__getValue"(x_69) with elab;
             x_70 := "i__checkObjectCoercible"(x_69_v) with elab;
             x_71 := {{ "o", x_69_v, "log" }};
             x_71_v := "i__getValue"(x_71) with elab;
             x_72_v := "i__getValue"("WORKER: finished executing worker script") with elab;
             goto [(not ((typeOf x_71_v) = Obj))] elab next_12;
    next_12: x_74 := metadata (x_71_v);
             x_73 := "i__isCallable"(x_71_v);
             goto [x_73] next_13 elab;
    next_13: x_75 := hasField(x_74,"@boundThis");
             goto [x_75] else_10 lab_6;
    else_10: x_76 := [x_74, "@boundThis"];
             x_77 := [x_74, "@boundArguments"];
             x_78 := [x_74, "@targetFunction"];
             x_79 := metadata (x_78);
             x_body_4 := [x_79, "@call"];
             x_fscope_4 := [x_79, "@scope"];
             x_80 := (({{ x_body_4, x_fscope_4, x_76 }} l+ x_77) l+ {{ x_72_v }});
             x_81 := apply(x_80) with elab;
             goto lab_7;
    lab_6:   x_body_5 := [x_74, "@call"];
             goto [(x_body_5 = "ExecuteEval")] then_10 else_11;
    then_10: x_82 := extern ExecuteEval(x__sc_fst, x__this, x_72_v) with elab;
             goto lab_7;
    else_11: x_fscope_5 := [x_74, "@scope"];
             goto [((typeOf x_71) = List)] then_11 else_12;
    then_11: goto [(l-nth(x_71, 0.) = "o")] then_12 else_12;
    then_12: x_this_6 := l-nth(x_71, 1.);
             goto fi_3;
    else_12: x_this_7 := undefined;
    fi_3:    PHI(x_this_8: x_this_6, x_this_7);
             goto [((typeOf x_this_8) = Obj)] next_14 next_15;
    next_14: [x_this_8, "__newTarget"] := {{ "d", undefined, true, true, true }};
    next_15: x_83 := x_body_5(x_fscope_5, x_this_8, x_72_v) with elab;
    lab_7:   PHI(x_84: x_81, x_82, x_83);
             goto [(x_84 = empty)] next_16 next_17;
    next_16: x_85 := undefined;
    next_17: PHI(x_86: x_84, x_85);
             x_86_v := "i__getValue"(x_86) with elab;
             ret := x_86_v;
    rlab:    return;
    elab:    PHI(ret: x_60, x_f_1_v, x_64, x_65, x_66, x_69_v, x_70, x_71_v, x_72_v, x__te, x__te, x_81, x_82, x_83, x_86_v);
             throw
};
